from torch.utils.data import DataLoader, Dataset
import numpy as np
import torch
import os
import json

RANDOM_SPLIT_SEED = 0
TEST_PORTION = 0.2  # portion of the dataset to use for testing, rest is for training.


class PoseEstimation6DDataset(Dataset):
    def __init__(self, dset_path: str, split: str) -> None:
        """
        Dataset for 6D pose estimation. Input is a set of histograms, output is a 6D pose.

        Args:
            dset_path (str): Path to the dataset - can be a real dataset, in which case this is a
                path to a folder containing subfolders with each capture. Or a simulated dataset,
                in which case this is a path to a .npz file, as generated by gen_sim_dataset.py.
            split (str): Split of the dataset to use. Must be "train" or "split".
        """

        assert split in ["train", "test"]

        self.dset_path = dset_path
        self.split = split

        if dset_path.endswith(".npz"):
            self.data_type = "sim"
        elif os.path.isdir(dset_path):
            self.data_type = "real"

        if self.data_type == "sim":
            with open(dset_path, "rb") as f:
                data = np.load(f)
                self.histograms = data["histograms"]  # (n_samples, n_cameras, n_bins)
                self.object_poses = data["object_poses"]  # (n_samples, 4, 4) (homog. matrix)

        elif self.data_type == "real":
            self.histograms = []
            self.object_poses = []

            for capture_folder in os.listdir(dset_path):
                with open(os.path.join(dset_path, capture_folder, "tmf.json"), "r") as f:
                    tmf_data = json.load(f)
                this_capture_histograms = [m["hists"] for m in tmf_data]
                this_capture_poses = [m["pose"] for m in tmf_data]

                self.histograms.append(this_capture_histograms)
                self.object_poses.append(this_capture_poses)

            self.histograms = np.array(self.histograms)
            self.object_poses = np.array(self.object_poses)

        # select data according to split
        # set the random seed for reproducibility
        np.random.seed(RANDOM_SPLIT_SEED)
        n_samples = self.histograms.shape[0]
        n_test = int(n_samples * TEST_PORTION)
        all_indices = np.arange(n_samples)
        np.random.shuffle(all_indices)
        test_indices = all_indices[:n_test]
        train_indices = all_indices[n_test:]

        if self.split == "train":
            self.histograms = self.histograms[train_indices]
            self.object_poses = self.object_poses[train_indices]
        elif self.split == "test":
            self.histograms = self.histograms[test_indices]
            self.object_poses = self.object_poses[test_indices]

    def __len__(self) -> int:
        return self.histograms.shape[0]

    def __getitem__(self, idx: int) -> dict:
        return self.histograms[idx], self.object_poses[idx]
